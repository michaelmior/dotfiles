# Ensure correct language is used
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8

# Advertise 256-color support
if [[ $TERM =~ '^screen' ]]; then
    export TERM="screen-256color"
else
    export TERM="xterm-256color"
fi

export EDITOR=vim

# shortcut to this dotfiles path is $ZSH
export ZSH=$HOME/.dotfiles
export PATH="~/bin:~/.local/bin:$PATH"

# OPAM configuration
[ -x /usr/bin/opam ] && . $HOME/.opam/opam-init/init.zsh > /dev/null 2> /dev/null

# Load url-quote-magic
autoload -Uz url-quote-magic
zle -N self-insert url-quote-magic

DISABLE_UPDATE_PROMPT="true"
COMPLETION_WAITING_DOTS="true"
PROJECT_PATHS=(~/apps)
source "$HOME/.dotfiles/zsh/zgen/zgen.zsh"
source "$HOME/.dotfiles/init.zsh"

# Allow a host-identifying symbol in localrc
: ${HOST_SYMBOL:="%{$fg[cyan]%}Î»%{$reset_color%}"}
export PROMPT="$HOST_SYMBOL${HOST_SYMBOL:+ }$PROMPT"

# XXX This needs to come after RVM
alias e="exec_scmb_expand_args $EDITOR"
[ -s "$HOME/.scm_breeze/scm_breeze.sh" ] && source "$HOME/.scm_breeze/scm_breeze.sh"

if [ command -v xclip &> /dev/null ]; then
    alias pbcopy='xclip -selection clipboard'
    alias pbpaste='xclip -selection clipboard -o'
fi

function wd { dpkg -S $(readlink -f `which -a $1 | grep -E '^/' | head -1`) }
alias dsm=docker-service-manager
alias norg='gron --ungron'
alias ungron='gron --ungron'

setopt histignorespace

export LESS=FSRX

# Allow Ctrl-z to toggle between suspend and resume
function Resume {
  fg
  zle push-input
  BUFFER=""
  zle accept-line
}
zle -N Resume
bindkey "^Z" Resume

# Only kill to the beginning of the line
bindkey "^U" backward-kill-line

# Add local manpath
export MANPATH=~/.man:$MANPATH

# Add fzf
export FZF_DEFAULT_COMMAND='fd --type f ""'
export FZF_CTRL_T_COMMAND='fd --type f ""'
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
zle     -N   fzf-file-widget
bindkey '^P' fzf-file-widget

# vim-superman
vman() {
    \vim -c "SuperMan $*"

    if [ "$?" != "0" ]; then
        echo "No manual entry for $*"
    fi
}

# Add command to quickly start or reattach to a tmux session by name
tm() {
    if [ -z $1 ]; then
        tmux list-sessions
        return
    fi
    tmux detach -s $1 2> /dev/null
    if [ -n "${TMUX+1}" ]; then
        tmux switch-client -t $1 2> /dev/null || tmux new-session -s $1
    else
        tmux attach-session -t $1 2> /dev/null || tmux new-session -s $1
    fi
}

_tm() {
  local word completions
  word="$1"
  sessions=`tmux list-sessions 2> /dev/null`
  [ $? -ne 0 ] && return
  completions=`echo "$sessions" | cut -d ':' -f1`
  reply=( "${(f)completions}" )
}
compctl -K _tm tm

# cd into the directory of a Python package
pcd() {
  dir=`python -c "import os; print(os.path.dirname(__import__('$1').__file__))"`
  [ $? -eq 0 ] && cd "$dir"
}

_pcd() {
    local word completions
    word="$1"
    completions=`python -c "import pkgutil; print('\n'.join([x[1] for x in pkgutil.iter_modules() if x[1].startswith('$1')]))"`
    reply=( "${(ps:\n:)completions}" )
}
compctl -K _pcd pcd

# Set window title under tmux
precmd() {
    if [ -z "$TMUX" ]; then return; fi
    echo -ne "\033]0;[$(tmux display-message -p "#S")] $(print -P "%~")\007"
}

if (( $+commands[tag] )); then
  tag() { command tag "$@"; source ${TAG_ALIAS_FILE:-/tmp/tag_aliases} 2>/dev/null }
fi

TAG_SEARCH_PROG=rg

agl() { ag --group --color $* | less -R }
jql () { jq -C . $* | less -R }
rgl () { rg --color always --heading $* | less -R }

orig_tree=$(which tree)
tree () {
  ignore=$(grep -hvEs '^$|^#' {~/,,$(git rev-parse --show-toplevel)/}.gitignore|tr \\n '\|'|sed 's_/\?|/\?_|_g')
  $orig_tree -I $ignore $*
}
tl () {
  tree -C $* | less
}

# Aliases for apt
alias ai='sudo apt install'
alias aps='apt search'
alias adg='sudo apt update && sudo apt upgrade'

# use .localrc for secret stuff you don't
# want in your public, versioned repo.
if [[ -a ~/.localrc ]]
then
    source ~/.localrc
fi

# Skip all this for non-interactive shells
[[ -z "$PS1" ]] && return

echo -en "\n Tip: "
shuf -n1 $HOME/.dotfiles/tips.txt
echo


# tabtab source for serverless package
# uninstall by removing these lines or running `tabtab uninstall serverless`
[[ -f ~/.dotfiles/node/node_modules/serverless/node_modules/tabtab/.completions/serverless.zsh ]] && . ~/.dotfiles/node/node_modules/serverless/node_modules/tabtab/.completions/serverless.zsh
# tabtab source for sls package
# uninstall by removing these lines or running `tabtab uninstall sls`
[[ -f ~/.dotfiles/node/node_modules/serverless/node_modules/tabtab/.completions/sls.zsh ]] && . ~/.dotfiles/node/node_modules/serverless/node_modules/tabtab/.completions/sls.zsh

# The next line updates PATH for the Google Cloud SDK.
if [ -f "$HOME/google-cloud-sdk/path.zsh.inc" ]; then . "$HOME/google-cloud-sdk/path.zsh.inc"; fi

# The next line enables shell command completion for gcloud.
if [ -f "$HOME/google-cloud-sdk/completion.zsh.inc" ]; then . "$HOME/google-cloud-sdk/completion.zsh.inc"; fi

export PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH"

[ -s "$HOME/.jabba/jabba.sh" ] && source "$HOME/.jabba/jabba.sh"

# Add RVM to PATH for scripting. Make sure this is the last PATH variable change.
export PATH="$HOME/.rvm/bin:$PATH"

test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"
